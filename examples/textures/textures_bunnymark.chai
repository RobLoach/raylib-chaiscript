/*******************************************************************************************
*
*   raylib [textures] example - Bunnymark
*
*   This example has been created using raylib 1.6 (www.raylib.com)
*   raylib is licensed under an unmodified zlib/libpng license (View raylib.h for details)
*
*   Copyright (c) 2014-2019 Ramon Santamaria (@raysan5)
*
********************************************************************************************/

var MAX_BUNNIES = 100000    // 100K bunnies limit

// This is the maximum amount of elements (quads) per batch
// NOTE: This value is defined in [rlgl] module and can be changed there
var MAX_BATCH_ELEMENTS = 8192

class Bunny {
    var color
    var speed
    var position

    def Bunny() {
        this.color = Color(GetRandomValue(50, 240), GetRandomValue(80, 240), GetRandomValue(100, 240), 255)
        this.position = GetMousePosition()
        this.speed = Vector2(GetRandomValue(-250, 250)/60, GetRandomValue(-250, 250)/60)
    }
}

var bunnies = []

// Initialization
//--------------------------------------------------------------------------------------
var screenWidth = 800;
var screenHeight = 450;

InitWindow(screenWidth, screenHeight, "raylib [textures] example - bunnymark");

// Load bunny texture
var texBunny = LoadTexture("resources/wabbit_alpha.png");

SetTargetFPS(60);               // Set our game to run at 60 frames-per-second
//--------------------------------------------------------------------------------------

// Main game loop
while (!WindowShouldClose())    // Detect window close button or ESC key
{
    // Update
    //----------------------------------------------------------------------------------
    if (IsMouseButtonDown(MOUSE_LEFT_BUTTON))
    {
        // Create more bunnies
        if (bunnies.size() < MAX_BUNNIES)
        {
            bunnies.push_back(Bunny())
        }
    }

    // Update bunnies
    for (var i = 0; i < bunnies.size(); ++i) {
        bunnies[i].position.x += bunnies[i].speed.x;
        bunnies[i].position.y += bunnies[i].speed.y;

        if (((bunnies[i].position.x + texBunny.width/2) > GetScreenWidth()) || ((bunnies[i].position.x + texBunny.width/2) < 0)) {
            bunnies[i].speed.x = bunnies[i].speed.x * -1;
        }
        if (((bunnies[i].position.y + texBunny.height/2) > GetScreenHeight()) || ((bunnies[i].position.y + texBunny.height/2 - 40) < 0)) {
            bunnies[i].speed.y = bunnies[i].speed.y * -1;
        }
    }
    //----------------------------------------------------------------------------------

    // Draw
    //----------------------------------------------------------------------------------
    BeginDrawing();

        ClearBackground(RAYWHITE);

        for (var i = 0; i < bunnies.size(); ++i) {
            // NOTE: When internal batch buffer limit is reached (MAX_BATCH_ELEMENTS),
            // a draw call is launched and buffer starts being filled again;
            // before issuing a draw call, updated vertex data from internal CPU buffer is send to GPU...
            // Process of sending data is costly and it could happen that GPU data has not been completely
            // processed for drawing while new data is tried to be sent (updating current in-use buffers)
            // it could generates a stall and consequently a frame drop, limiting the number of drawn bunnies
            DrawTexture(texBunny, bunnies[i].position.x, bunnies[i].position.y, bunnies[i].color);
        }

        DrawRectangle(0, 0, screenWidth, 40, BLACK);

        //DrawText("bunnies: " + to_string(bunnies.size()), 120, 10, 20, GREEN);
        //DrawText("batched draw calls: " + to_string(1 + bunnies.size()/MAX_BATCH_ELEMENTS), 320, 10, 20, MAROON);
        DrawText(FormatText("bunnies: %i", bunnies.size()), 120, 10, 20, GREEN);
        DrawText(FormatText("batched draw calls: %i", 1 + bunnies.size()/MAX_BATCH_ELEMENTS), 320, 10, 20, MAROON);

        DrawFPS(10, 10);

    EndDrawing();
    //----------------------------------------------------------------------------------
}

// De-Initialization
//--------------------------------------------------------------------------------------
UnloadTexture(texBunny);    // Unload bunny texture

CloseWindow();              // Close window and OpenGL context
//--------------------------------------------------------------------------------------
